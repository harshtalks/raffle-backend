{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vrfCoordinatorAddress",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionID",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint32",
          "name": "_callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "_entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__RaffleNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__SendMoreToEnterRaffle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmation",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x732bdc670b3b6608a046b948d87e8082600fdc2c23fc1e6ac786d22ca29e9db3",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1199647",
    "logsBloom": "0x
    "blockHash": "0x191887f73f5dca52e16774972181dec927680053371e2bcd657709b04dfc482d",
    "transactionHash": "0x732bdc670b3b6608a046b948d87e8082600fdc2c23fc1e6ac786d22ca29e9db3",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1199647",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "1",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "500000",
    "100000000000000000",
    "500000"
  ],
  "numDeployments": 1,
  "solcInputHash": "844d2e970c5a6958e3d04c7a16230c80",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vrfCoordinatorAddress\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionID\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__RaffleNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__SendMoreToEnterRaffle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmation\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"enterRaffle()\":{\"notice\":\"to enter the raffle\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\n// imports\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\n// errors\\nerror Raffle__UpkeepNotNeeded(\\n  uint256 currentBalance,\\n  uint256 numPlayers,\\n  uint256 raffleState\\n);\\nerror Raffle__TransferFailed();\\nerror Raffle__SendMoreToEnterRaffle();\\nerror Raffle__RaffleNotOpen();\\n\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n  // State Variables\\n\\n  enum RaffleState {\\n    OPEN,\\n    FINDING_WINNER\\n  }\\n\\n  // Parent Class Variables\\n\\n  VRFCoordinatorV2Interface private immutable vrfCoordinator;\\n  uint64 private immutable subscriptionID;\\n  bytes32 private immutable keyHash; // gaslane\\n  uint32 private immutable callbackGasLimit;\\n  uint16 private constant REQ_CONF = 3;\\n  uint32 private constant NUM_WORDS = 1;\\n\\n  // Lottery Variables\\n\\n  uint256 private immutable interval;\\n  uint256 private lastTimeStamp;\\n  address private winner;\\n  uint256 private entranceFee;\\n  address payable[] private participants;\\n  RaffleState private state;\\n\\n  // events\\n  event RequestedRaffleWinner(uint256 indexed requestId);\\n  event RaffleEnter(address indexed player);\\n  event WinnerPicked(address indexed player);\\n\\n  constructor(\\n    address _vrfCoordinatorAddress,\\n    uint64 _subscriptionID,\\n    bytes32 _keyHash,\\n    uint32 _callbackGasLimit,\\n    uint256 _entranceFee,\\n    uint256 _interval\\n  ) VRFConsumerBaseV2(_vrfCoordinatorAddress) {\\n    vrfCoordinator = VRFCoordinatorV2Interface(_vrfCoordinatorAddress);\\n    subscriptionID = _subscriptionID;\\n    keyHash = _keyHash;\\n    callbackGasLimit = _callbackGasLimit;\\n    entranceFee = _entranceFee;\\n    interval = _interval;\\n    lastTimeStamp = block.timestamp;\\n    state = RaffleState.OPEN;\\n  }\\n\\n  // Getter functions\\n\\n  function getRaffleState() public view returns (RaffleState) {\\n    return state;\\n  }\\n\\n  function getEntranceFee() public view returns (uint256) {\\n    return entranceFee;\\n  }\\n\\n  function getNumWords() public pure returns (uint256) {\\n    return NUM_WORDS;\\n  }\\n\\n  function getRecentWinner() public view returns (address) {\\n    return winner;\\n  }\\n\\n  function getPlayer(uint256 index) public view returns (address) {\\n    return participants[index];\\n  }\\n\\n  function getLastTimeStamp() public view returns (uint256) {\\n    return lastTimeStamp;\\n  }\\n\\n  function getInterval() public view returns (uint256) {\\n    return interval;\\n  }\\n\\n  function getNumPlayers() public view returns (uint256) {\\n    return participants.length;\\n  }\\n\\n  function getRequestConfirmation() public pure returns (uint16) {\\n    return REQ_CONF;\\n  }\\n\\n  // functions\\n\\n  /**\\n    to enter the raffle\\n */\\n\\n  function enterRaffle() public payable {\\n    if (msg.value < entranceFee) {\\n      revert Raffle__SendMoreToEnterRaffle();\\n    }\\n\\n    if (state != RaffleState.OPEN) {\\n      revert Raffle__RaffleNotOpen();\\n    }\\n\\n    participants.push(payable(msg.sender));\\n\\n    emit RaffleEnter(msg.sender);\\n  }\\n\\n  function checkUpkeep(\\n    bytes memory /* checkData */\\n  )\\n    public\\n    view\\n    override\\n    returns (\\n      bool upkeepNeeded,\\n      bytes memory /* performData */\\n    )\\n  {\\n    bool isOpen = state == RaffleState.OPEN;\\n    bool timePassed = ((block.timestamp - lastTimeStamp) > interval);\\n    bool hasParticipants = participants.length > 0;\\n    bool hasBalance = address(this).balance > 0;\\n    upkeepNeeded = isOpen && timePassed && hasParticipants && hasBalance;\\n    return (upkeepNeeded, \\\"0x0\\\");\\n  }\\n\\n  function performUpkeep(\\n    bytes memory /* checkData */\\n  ) external override {\\n    (bool upkeedNeeded, ) = checkUpkeep(\\\"\\\");\\n    if (!upkeedNeeded) {\\n      revert Raffle__UpkeepNotNeeded(\\n        address(this).balance,\\n        participants.length,\\n        uint256(state)\\n      );\\n    }\\n\\n    state = RaffleState.FINDING_WINNER;\\n    uint256 requestId = vrfCoordinator.requestRandomWords(\\n      keyHash,\\n      subscriptionID,\\n      REQ_CONF,\\n      callbackGasLimit,\\n      NUM_WORDS\\n    );\\n\\n    emit RequestedRaffleWinner(requestId);\\n  }\\n\\n  function fulfillRandomWords(\\n    uint256, /*requestId*/\\n    uint256[] memory randomWords\\n  ) internal override {\\n    uint256 winnerIndex = randomWords[0] % participants.length;\\n    address payable recentWinner = participants[winnerIndex];\\n    winner = recentWinner;\\n    participants = new address payable[](0);\\n    state = RaffleState.OPEN;\\n    lastTimeStamp = block.timestamp;\\n    (bool callSuccess, ) = recentWinner.call{ value: address(this).balance }(\\n      \\\"\\\"\\n    );\\n\\n    if (!callSuccess) {\\n      revert Raffle__TransferFailed();\\n    }\\n    emit WinnerPicked(recentWinner);\\n  }\\n}\\n\",\"keccak256\":\"0x0c8f0be8bc0ac691038105cc6c9982c0bd7a6dc1d5de21aab87cd4191b6ff743\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b506040516200177638038062001776833981810160405281019062000038919062000292565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508467ffffffffffffffff1660c08167ffffffffffffffff16815250508360e081815250508263ffffffff166101008163ffffffff168152505081600281905550806101208181525050426000819055506000600460006101000a81548160ff021916908360018111156200011b576200011a6200032e565b5b02179055505050505050506200035d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200015e8262000131565b9050919050565b620001708162000151565b81146200017c57600080fd5b50565b600081519050620001908162000165565b92915050565b600067ffffffffffffffff82169050919050565b620001b58162000196565b8114620001c157600080fd5b50565b600081519050620001d581620001aa565b92915050565b6000819050919050565b620001f081620001db565b8114620001fc57600080fd5b50565b6000815190506200021081620001e5565b92915050565b600063ffffffff82169050919050565b620002318162000216565b81146200023d57600080fd5b50565b600081519050620002518162000226565b92915050565b6000819050919050565b6200026c8162000257565b81146200027857600080fd5b50565b6000815190506200028c8162000261565b92915050565b60008060008060008060c08789031215620002b257620002b16200012c565b5b6000620002c289828a016200017f565b9650506020620002d589828a01620001c4565b9550506040620002e889828a01620001ff565b9450506060620002fb89828a0162000240565b93505060806200030e89828a016200027b565b92505060a06200032189828a016200027b565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e05161010051610120516113bb620003bb600039600081816107af0152610858015260006106600152600061061c0152600061063d015260006105e0015260008181610319015261036d01526113bb6000f3fe6080604052600436106100c25760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b414610238578063c1c244e814610263578063ca6a9ef81461028e578063e55ae4e8146102b9576100c2565b806353a2c19a146101a457806355c9e926146101cf5780636e04ff0d146101fa576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc539146101465780634585e33b14610150578063473f1ddc14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610bc9565b60405180910390f35b3480156100fe57600080fd5b50610107610300565b6040516101149190610c5b565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610e0f565b610317565b005b61014e6103d7565b005b34801561015c57600080fd5b5061017760048036038101906101729190610f20565b610528565b005b34801561018557600080fd5b5061018e610727565b60405161019b9190610faa565b60405180910390f35b3480156101b057600080fd5b506101b9610751565b6040516101c69190610bc9565b60405180910390f35b3480156101db57600080fd5b506101e4610760565b6040516101f19190610bc9565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c9190610f20565b61076d565b60405161022f929190611068565b60405180910390f35b34801561024457600080fd5b5061024d610854565b60405161025a9190610bc9565b60405180910390f35b34801561026f57600080fd5b5061027861087c565b6040516102859190610bc9565b60405180910390f35b34801561029a57600080fd5b506102a3610885565b6040516102b091906110b5565b60405180910390f35b3480156102c557600080fd5b506102e060048036038101906102db91906110d0565b61088e565b6040516102ed9190610faa565b60405180910390f35b6000600254905090565b6000600460009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103c09291906110fd565b60405180910390fd5b6103d382826108d6565b5050565b600254341015610413576040517f3038c00a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561042757610426610be4565b5b600460009054906101000a900460ff16600181111561044957610448610be4565b5b14610480576040517fd24a271400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006105426040518060200160405280600081525061076d565b509050806105b15747600380549050600460009054906101000a900460ff16600181111561057357610572610be4565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105a893929190611126565b60405180910390fd5b6001600460006101000a81548160ff021916908360018111156105d7576105d6610be4565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106a19594939291906111b8565b602060405180830381600087803b1580156106bb57600080fd5b505af11580156106cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f39190611220565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a2505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600380549050905090565b60006060600080600181111561078657610785610be4565b5b600460009054906101000a900460ff1660018111156107a8576107a7610be4565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600054426107dc919061127c565b119050600080600380549050119050600080471190508380156107fc5750825b80156108055750815b801561080e5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008054905090565b60006003905090565b6000600382815481106108a4576108a36112b0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600380549050826000815181106108f2576108f16112b0565b5b6020026020010151610904919061130e565b905060006003828154811061091c5761091b6112b0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff8111156109a5576109a4610ccc565b5b6040519080825280602002602001820160405280156109d35781602001602082028036833780820191505090505b50600390805190602001906109e9929190610b09565b506000600460006101000a81548160ff02191690836001811115610a1057610a0f610be4565b5b02179055504260008190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a4290611370565b60006040518083038185875af1925050503d8060008114610a7f576040519150601f19603f3d011682016040523d82523d6000602084013e610a84565b606091505b5050905080610abf576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b82579160200282015b82811115610b815782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b29565b5b509050610b8f9190610b93565b5090565b5b80821115610bac576000816000905550600101610b94565b5090565b6000819050919050565b610bc381610bb0565b82525050565b6000602082019050610bde6000830184610bba565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c2457610c23610be4565b5b50565b6000819050610c3582610c13565b919050565b6000610c4582610c27565b9050919050565b610c5581610c3a565b82525050565b6000602082019050610c706000830184610c4c565b92915050565b6000604051905090565b600080fd5b600080fd5b610c9381610bb0565b8114610c9e57600080fd5b50565b600081359050610cb081610c8a565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d0482610cbb565b810181811067ffffffffffffffff82111715610d2357610d22610ccc565b5b80604052505050565b6000610d36610c76565b9050610d428282610cfb565b919050565b600067ffffffffffffffff821115610d6257610d61610ccc565b5b602082029050602081019050919050565b600080fd5b6000610d8b610d8684610d47565b610d2c565b90508083825260208201905060208402830185811115610dae57610dad610d73565b5b835b81811015610dd75780610dc38882610ca1565b845260208401935050602081019050610db0565b5050509392505050565b600082601f830112610df657610df5610cb6565b5b8135610e06848260208601610d78565b91505092915050565b60008060408385031215610e2657610e25610c80565b5b6000610e3485828601610ca1565b925050602083013567ffffffffffffffff811115610e5557610e54610c85565b5b610e6185828601610de1565b9150509250929050565b600080fd5b600067ffffffffffffffff821115610e8b57610e8a610ccc565b5b610e9482610cbb565b9050602081019050919050565b82818337600083830152505050565b6000610ec3610ebe84610e70565b610d2c565b905082815260208101848484011115610edf57610ede610e6b565b5b610eea848285610ea1565b509392505050565b600082601f830112610f0757610f06610cb6565b5b8135610f17848260208601610eb0565b91505092915050565b600060208284031215610f3657610f35610c80565b5b600082013567ffffffffffffffff811115610f5457610f53610c85565b5b610f6084828501610ef2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f9482610f69565b9050919050565b610fa481610f89565b82525050565b6000602082019050610fbf6000830184610f9b565b92915050565b60008115159050919050565b610fda81610fc5565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561101a578082015181840152602081019050610fff565b83811115611029576000848401525b50505050565b600061103a82610fe0565b6110448185610feb565b9350611054818560208601610ffc565b61105d81610cbb565b840191505092915050565b600060408201905061107d6000830185610fd1565b818103602083015261108f818461102f565b90509392505050565b600061ffff82169050919050565b6110af81611098565b82525050565b60006020820190506110ca60008301846110a6565b92915050565b6000602082840312156110e6576110e5610c80565b5b60006110f484828501610ca1565b91505092915050565b60006040820190506111126000830185610f9b565b61111f6020830184610f9b565b9392505050565b600060608201905061113b6000830186610bba565b6111486020830185610bba565b6111556040830184610bba565b949350505050565b6000819050919050565b6111708161115d565b82525050565b600067ffffffffffffffff82169050919050565b61119381611176565b82525050565b600063ffffffff82169050919050565b6111b281611199565b82525050565b600060a0820190506111cd6000830188611167565b6111da602083018761118a565b6111e760408301866110a6565b6111f460608301856111a9565b61120160808301846111a9565b9695505050505050565b60008151905061121a81610c8a565b92915050565b60006020828403121561123657611235610c80565b5b60006112448482850161120b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061128782610bb0565b915061129283610bb0565b9250828210156112a5576112a461124d565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061131982610bb0565b915061132483610bb0565b925082611334576113336112df565b5b828206905092915050565b600081905092915050565b50565b600061135a60008361133f565b91506113658261134a565b600082019050919050565b600061137b8261134d565b915081905091905056fea2646970667358221220c0004f7c77def50448ce953efa6e4f568d9fe64c054f02eb65aba1aada5fd1e164736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b414610238578063c1c244e814610263578063ca6a9ef81461028e578063e55ae4e8146102b9576100c2565b806353a2c19a146101a457806355c9e926146101cf5780636e04ff0d146101fa576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc539146101465780634585e33b14610150578063473f1ddc14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610bc9565b60405180910390f35b3480156100fe57600080fd5b50610107610300565b6040516101149190610c5b565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610e0f565b610317565b005b61014e6103d7565b005b34801561015c57600080fd5b5061017760048036038101906101729190610f20565b610528565b005b34801561018557600080fd5b5061018e610727565b60405161019b9190610faa565b60405180910390f35b3480156101b057600080fd5b506101b9610751565b6040516101c69190610bc9565b60405180910390f35b3480156101db57600080fd5b506101e4610760565b6040516101f19190610bc9565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c9190610f20565b61076d565b60405161022f929190611068565b60405180910390f35b34801561024457600080fd5b5061024d610854565b60405161025a9190610bc9565b60405180910390f35b34801561026f57600080fd5b5061027861087c565b6040516102859190610bc9565b60405180910390f35b34801561029a57600080fd5b506102a3610885565b6040516102b091906110b5565b60405180910390f35b3480156102c557600080fd5b506102e060048036038101906102db91906110d0565b61088e565b6040516102ed9190610faa565b60405180910390f35b6000600254905090565b6000600460009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c957337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103c09291906110fd565b60405180910390fd5b6103d382826108d6565b5050565b600254341015610413576040517f3038c00a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561042757610426610be4565b5b600460009054906101000a900460ff16600181111561044957610448610be4565b5b14610480576040517fd24a271400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006105426040518060200160405280600081525061076d565b509050806105b15747600380549050600460009054906101000a900460ff16600181111561057357610572610be4565b5b6040517f584327aa0000000000000000000000000000000000000000000000000000000081526004016105a893929190611126565b60405180910390fd5b6001600460006101000a81548160ff021916908360018111156105d7576105d6610be4565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106a19594939291906111b8565b602060405180830381600087803b1580156106bb57600080fd5b505af11580156106cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f39190611220565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a2505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600380549050905090565b60006060600080600181111561078657610785610be4565b5b600460009054906101000a900460ff1660018111156107a8576107a7610be4565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600054426107dc919061127c565b119050600080600380549050119050600080471190508380156107fc5750825b80156108055750815b801561080e5750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008054905090565b60006003905090565b6000600382815481106108a4576108a36112b0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600380549050826000815181106108f2576108f16112b0565b5b6020026020010151610904919061130e565b905060006003828154811061091c5761091b6112b0565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff8111156109a5576109a4610ccc565b5b6040519080825280602002602001820160405280156109d35781602001602082028036833780820191505090505b50600390805190602001906109e9929190610b09565b506000600460006101000a81548160ff02191690836001811115610a1057610a0f610be4565b5b02179055504260008190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a4290611370565b60006040518083038185875af1925050503d8060008114610a7f576040519150601f19603f3d011682016040523d82523d6000602084013e610a84565b606091505b5050905080610abf576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b82579160200282015b82811115610b815782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b29565b5b509050610b8f9190610b93565b5090565b5b80821115610bac576000816000905550600101610b94565b5090565b6000819050919050565b610bc381610bb0565b82525050565b6000602082019050610bde6000830184610bba565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610c2457610c23610be4565b5b50565b6000819050610c3582610c13565b919050565b6000610c4582610c27565b9050919050565b610c5581610c3a565b82525050565b6000602082019050610c706000830184610c4c565b92915050565b6000604051905090565b600080fd5b600080fd5b610c9381610bb0565b8114610c9e57600080fd5b50565b600081359050610cb081610c8a565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610d0482610cbb565b810181811067ffffffffffffffff82111715610d2357610d22610ccc565b5b80604052505050565b6000610d36610c76565b9050610d428282610cfb565b919050565b600067ffffffffffffffff821115610d6257610d61610ccc565b5b602082029050602081019050919050565b600080fd5b6000610d8b610d8684610d47565b610d2c565b90508083825260208201905060208402830185811115610dae57610dad610d73565b5b835b81811015610dd75780610dc38882610ca1565b845260208401935050602081019050610db0565b5050509392505050565b600082601f830112610df657610df5610cb6565b5b8135610e06848260208601610d78565b91505092915050565b60008060408385031215610e2657610e25610c80565b5b6000610e3485828601610ca1565b925050602083013567ffffffffffffffff811115610e5557610e54610c85565b5b610e6185828601610de1565b9150509250929050565b600080fd5b600067ffffffffffffffff821115610e8b57610e8a610ccc565b5b610e9482610cbb565b9050602081019050919050565b82818337600083830152505050565b6000610ec3610ebe84610e70565b610d2c565b905082815260208101848484011115610edf57610ede610e6b565b5b610eea848285610ea1565b509392505050565b600082601f830112610f0757610f06610cb6565b5b8135610f17848260208601610eb0565b91505092915050565b600060208284031215610f3657610f35610c80565b5b600082013567ffffffffffffffff811115610f5457610f53610c85565b5b610f6084828501610ef2565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f9482610f69565b9050919050565b610fa481610f89565b82525050565b6000602082019050610fbf6000830184610f9b565b92915050565b60008115159050919050565b610fda81610fc5565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561101a578082015181840152602081019050610fff565b83811115611029576000848401525b50505050565b600061103a82610fe0565b6110448185610feb565b9350611054818560208601610ffc565b61105d81610cbb565b840191505092915050565b600060408201905061107d6000830185610fd1565b818103602083015261108f818461102f565b90509392505050565b600061ffff82169050919050565b6110af81611098565b82525050565b60006020820190506110ca60008301846110a6565b92915050565b6000602082840312156110e6576110e5610c80565b5b60006110f484828501610ca1565b91505092915050565b60006040820190506111126000830185610f9b565b61111f6020830184610f9b565b9392505050565b600060608201905061113b6000830186610bba565b6111486020830185610bba565b6111556040830184610bba565b949350505050565b6000819050919050565b6111708161115d565b82525050565b600067ffffffffffffffff82169050919050565b61119381611176565b82525050565b600063ffffffff82169050919050565b6111b281611199565b82525050565b600060a0820190506111cd6000830188611167565b6111da602083018761118a565b6111e760408301866110a6565b6111f460608301856111a9565b61120160808301846111a9565b9695505050505050565b60008151905061121a81610c8a565b92915050565b60006020828403121561123657611235610c80565b5b60006112448482850161120b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061128782610bb0565b915061129283610bb0565b9250828210156112a5576112a461124d565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061131982610bb0565b915061132483610bb0565b925082611334576113336112df565b5b828206905092915050565b600081905092915050565b50565b600061135a60008361133f565b91506113658261134a565b600082019050919050565b600061137b8261134d565b915081905091905056fea2646970667358221220c0004f7c77def50448ce953efa6e4f568d9fe64c054f02eb65aba1aada5fd1e164736f6c63430008090033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "enterRaffle()": {
        "notice": "to enter the raffle"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 210,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "lastTimeStamp",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 212,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "winner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 214,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "entranceFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 217,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "participants",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 220,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "state",
        "offset": 0,
        "slot": "4",
        "type": "t_enum(RaffleState)191"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)191": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}